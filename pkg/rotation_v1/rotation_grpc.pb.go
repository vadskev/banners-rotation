// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: rotation.proto

package rotation_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Rotation_AddBanner_FullMethodName         = "/rotation_v1.Rotation/AddBanner"
	Rotation_DeleteBanner_FullMethodName      = "/rotation_v1.Rotation/DeleteBanner"
	Rotation_AddSlot_FullMethodName           = "/rotation_v1.Rotation/AddSlot"
	Rotation_DeleteSlot_FullMethodName        = "/rotation_v1.Rotation/DeleteSlot"
	Rotation_AddSocialGroup_FullMethodName    = "/rotation_v1.Rotation/AddSocialGroup"
	Rotation_DeleteSocialGroup_FullMethodName = "/rotation_v1.Rotation/DeleteSocialGroup"
	Rotation_AttachBanner_FullMethodName      = "/rotation_v1.Rotation/AttachBanner"
	Rotation_DetachBanner_FullMethodName      = "/rotation_v1.Rotation/DetachBanner"
	Rotation_HitBanner_FullMethodName         = "/rotation_v1.Rotation/HitBanner"
	Rotation_SelectBanner_FullMethodName      = "/rotation_v1.Rotation/SelectBanner"
)

// RotationClient is the client API for Rotation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RotationClient interface {
	// API для создания коллекции баннеров
	AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*AddBannerResponse, error)
	DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*DeleteBannerResponse, error)
	// API для создания коллекции слотов
	AddSlot(ctx context.Context, in *AddSlotRequest, opts ...grpc.CallOption) (*AddSlotResponse, error)
	DeleteSlot(ctx context.Context, in *DeleteSlotRequest, opts ...grpc.CallOption) (*DeleteSlotResponse, error)
	// API для создания коллекции соц. группы
	AddSocialGroup(ctx context.Context, in *AddSocialGroupRequest, opts ...grpc.CallOption) (*AddSocialGroupResponse, error)
	DeleteSocialGroup(ctx context.Context, in *DeleteSocialGroupRequest, opts ...grpc.CallOption) (*DeleteSocialGroupResponse, error)
	// API для прикрепления баннеров к слоту
	AttachBanner(ctx context.Context, in *AttachBannerRequest, opts ...grpc.CallOption) (*AttachBannerResponse, error)
	DetachBanner(ctx context.Context, in *DetachBannerRequest, opts ...grpc.CallOption) (*DetachBannerResponse, error)
	// API для ротации
	HitBanner(ctx context.Context, in *HitBannerRequest, opts ...grpc.CallOption) (*HitBannerResponse, error)
	SelectBanner(ctx context.Context, in *SelectBannerRequest, opts ...grpc.CallOption) (*SelectBannerResponse, error)
}

type rotationClient struct {
	cc grpc.ClientConnInterface
}

func NewRotationClient(cc grpc.ClientConnInterface) RotationClient {
	return &rotationClient{cc}
}

func (c *rotationClient) AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*AddBannerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBannerResponse)
	err := c.cc.Invoke(ctx, Rotation_AddBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationClient) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*DeleteBannerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBannerResponse)
	err := c.cc.Invoke(ctx, Rotation_DeleteBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationClient) AddSlot(ctx context.Context, in *AddSlotRequest, opts ...grpc.CallOption) (*AddSlotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSlotResponse)
	err := c.cc.Invoke(ctx, Rotation_AddSlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationClient) DeleteSlot(ctx context.Context, in *DeleteSlotRequest, opts ...grpc.CallOption) (*DeleteSlotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSlotResponse)
	err := c.cc.Invoke(ctx, Rotation_DeleteSlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationClient) AddSocialGroup(ctx context.Context, in *AddSocialGroupRequest, opts ...grpc.CallOption) (*AddSocialGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSocialGroupResponse)
	err := c.cc.Invoke(ctx, Rotation_AddSocialGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationClient) DeleteSocialGroup(ctx context.Context, in *DeleteSocialGroupRequest, opts ...grpc.CallOption) (*DeleteSocialGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSocialGroupResponse)
	err := c.cc.Invoke(ctx, Rotation_DeleteSocialGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationClient) AttachBanner(ctx context.Context, in *AttachBannerRequest, opts ...grpc.CallOption) (*AttachBannerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachBannerResponse)
	err := c.cc.Invoke(ctx, Rotation_AttachBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationClient) DetachBanner(ctx context.Context, in *DetachBannerRequest, opts ...grpc.CallOption) (*DetachBannerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetachBannerResponse)
	err := c.cc.Invoke(ctx, Rotation_DetachBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationClient) HitBanner(ctx context.Context, in *HitBannerRequest, opts ...grpc.CallOption) (*HitBannerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HitBannerResponse)
	err := c.cc.Invoke(ctx, Rotation_HitBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationClient) SelectBanner(ctx context.Context, in *SelectBannerRequest, opts ...grpc.CallOption) (*SelectBannerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelectBannerResponse)
	err := c.cc.Invoke(ctx, Rotation_SelectBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RotationServer is the server API for Rotation service.
// All implementations must embed UnimplementedRotationServer
// for forward compatibility
type RotationServer interface {
	// API для создания коллекции баннеров
	AddBanner(context.Context, *AddBannerRequest) (*AddBannerResponse, error)
	DeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerResponse, error)
	// API для создания коллекции слотов
	AddSlot(context.Context, *AddSlotRequest) (*AddSlotResponse, error)
	DeleteSlot(context.Context, *DeleteSlotRequest) (*DeleteSlotResponse, error)
	// API для создания коллекции соц. группы
	AddSocialGroup(context.Context, *AddSocialGroupRequest) (*AddSocialGroupResponse, error)
	DeleteSocialGroup(context.Context, *DeleteSocialGroupRequest) (*DeleteSocialGroupResponse, error)
	// API для прикрепления баннеров к слоту
	AttachBanner(context.Context, *AttachBannerRequest) (*AttachBannerResponse, error)
	DetachBanner(context.Context, *DetachBannerRequest) (*DetachBannerResponse, error)
	// API для ротации
	HitBanner(context.Context, *HitBannerRequest) (*HitBannerResponse, error)
	SelectBanner(context.Context, *SelectBannerRequest) (*SelectBannerResponse, error)
	mustEmbedUnimplementedRotationServer()
}

// UnimplementedRotationServer must be embedded to have forward compatible implementations.
type UnimplementedRotationServer struct {
}

func (UnimplementedRotationServer) AddBanner(context.Context, *AddBannerRequest) (*AddBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanner not implemented")
}
func (UnimplementedRotationServer) DeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (UnimplementedRotationServer) AddSlot(context.Context, *AddSlotRequest) (*AddSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSlot not implemented")
}
func (UnimplementedRotationServer) DeleteSlot(context.Context, *DeleteSlotRequest) (*DeleteSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSlot not implemented")
}
func (UnimplementedRotationServer) AddSocialGroup(context.Context, *AddSocialGroupRequest) (*AddSocialGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSocialGroup not implemented")
}
func (UnimplementedRotationServer) DeleteSocialGroup(context.Context, *DeleteSocialGroupRequest) (*DeleteSocialGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSocialGroup not implemented")
}
func (UnimplementedRotationServer) AttachBanner(context.Context, *AttachBannerRequest) (*AttachBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachBanner not implemented")
}
func (UnimplementedRotationServer) DetachBanner(context.Context, *DetachBannerRequest) (*DetachBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachBanner not implemented")
}
func (UnimplementedRotationServer) HitBanner(context.Context, *HitBannerRequest) (*HitBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitBanner not implemented")
}
func (UnimplementedRotationServer) SelectBanner(context.Context, *SelectBannerRequest) (*SelectBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectBanner not implemented")
}
func (UnimplementedRotationServer) mustEmbedUnimplementedRotationServer() {}

// UnsafeRotationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RotationServer will
// result in compilation errors.
type UnsafeRotationServer interface {
	mustEmbedUnimplementedRotationServer()
}

func RegisterRotationServer(s grpc.ServiceRegistrar, srv RotationServer) {
	s.RegisterService(&Rotation_ServiceDesc, srv)
}

func _Rotation_AddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationServer).AddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rotation_AddBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationServer).AddBanner(ctx, req.(*AddBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotation_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rotation_DeleteBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationServer).DeleteBanner(ctx, req.(*DeleteBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotation_AddSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationServer).AddSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rotation_AddSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationServer).AddSlot(ctx, req.(*AddSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotation_DeleteSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationServer).DeleteSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rotation_DeleteSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationServer).DeleteSlot(ctx, req.(*DeleteSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotation_AddSocialGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSocialGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationServer).AddSocialGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rotation_AddSocialGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationServer).AddSocialGroup(ctx, req.(*AddSocialGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotation_DeleteSocialGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSocialGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationServer).DeleteSocialGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rotation_DeleteSocialGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationServer).DeleteSocialGroup(ctx, req.(*DeleteSocialGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotation_AttachBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationServer).AttachBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rotation_AttachBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationServer).AttachBanner(ctx, req.(*AttachBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotation_DetachBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationServer).DetachBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rotation_DetachBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationServer).DetachBanner(ctx, req.(*DetachBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotation_HitBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HitBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationServer).HitBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rotation_HitBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationServer).HitBanner(ctx, req.(*HitBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotation_SelectBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationServer).SelectBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rotation_SelectBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationServer).SelectBanner(ctx, req.(*SelectBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rotation_ServiceDesc is the grpc.ServiceDesc for Rotation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rotation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rotation_v1.Rotation",
	HandlerType: (*RotationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBanner",
			Handler:    _Rotation_AddBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _Rotation_DeleteBanner_Handler,
		},
		{
			MethodName: "AddSlot",
			Handler:    _Rotation_AddSlot_Handler,
		},
		{
			MethodName: "DeleteSlot",
			Handler:    _Rotation_DeleteSlot_Handler,
		},
		{
			MethodName: "AddSocialGroup",
			Handler:    _Rotation_AddSocialGroup_Handler,
		},
		{
			MethodName: "DeleteSocialGroup",
			Handler:    _Rotation_DeleteSocialGroup_Handler,
		},
		{
			MethodName: "AttachBanner",
			Handler:    _Rotation_AttachBanner_Handler,
		},
		{
			MethodName: "DetachBanner",
			Handler:    _Rotation_DetachBanner_Handler,
		},
		{
			MethodName: "HitBanner",
			Handler:    _Rotation_HitBanner_Handler,
		},
		{
			MethodName: "SelectBanner",
			Handler:    _Rotation_SelectBanner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rotation.proto",
}
